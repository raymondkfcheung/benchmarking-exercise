
//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03237`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/bench-runtime/bench_runtime.compact.compressed.wasm
// --pallet
// pallet_identity
// --extrinsic
// 
// --output
// pallets/identity/src/weights/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 64]`.
	fn set_identity(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3469`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_831_974, 0)
			.saturating_add(Weight::from_parts(0, 3469))
			// Standard Error: 787
			.saturating_add(Weight::from_parts(1_434, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 64]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_identity_update(b: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `106 + b * (2 ±0) + j * (5 ±0)`
		//  Estimated: `3570 + b * (2 ±0) + j * (5 ±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_748_947, 0)
			.saturating_add(Weight::from_parts(0, 3570))
			// Standard Error: 401
			.saturating_add(Weight::from_parts(2_983, 0).saturating_mul(b.into()))
			// Standard Error: 1_240
			.saturating_add(Weight::from_parts(10_346, 0).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(j.into()))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 64]`.
	/// The range of component `j` is `[0, 19]`.
	fn provide_judgement_inline(b: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `106 + b * (4 ±0) + j * (5 ±0)`
		//  Estimated: `3573 + b * (4 ±0) + j * (5 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(8_537_120, 0)
			.saturating_add(Weight::from_parts(0, 3573))
			// Standard Error: 722
			.saturating_add(Weight::from_parts(16_654, 0).saturating_mul(b.into()))
			// Standard Error: 2_342
			.saturating_add(Weight::from_parts(24_183, 0).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(j.into()))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Identity::JudgementsDoubleMap` (r:1 w:1)
	/// Proof: `Identity::JudgementsDoubleMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 64]`.
	/// The range of component `j` is `[0, 19]`.
	fn provide_judgement_double_map(b: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182 + b * (4 ±0) + j * (16 ±0)`
		//  Estimated: `3637 + b * (4 ±0) + j * (16 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(14_254_576, 0)
			.saturating_add(Weight::from_parts(0, 3637))
			// Standard Error: 1_358
			.saturating_add(Weight::from_parts(1_615, 0).saturating_mul(b.into()))
			// Standard Error: 4_402
			.saturating_add(Weight::from_parts(188_995, 0).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 16).saturating_mul(j.into()))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Identity::JudgementsDoubleMap` (r:1 w:0)
	/// Proof: `Identity::JudgementsDoubleMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 64]`.
	/// The range of component `j` is `[0, 20]`.
	fn clear_identity_inline_usage(b: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111 + b * (2 ±0) + j * (5 ±0)`
		//  Estimated: `3575 + b * (2 ±0) + j * (5 ±0)`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(21_853_255, 0)
			.saturating_add(Weight::from_parts(0, 3575))
			// Standard Error: 1_086
			.saturating_add(Weight::from_parts(17_711, 0).saturating_mul(b.into()))
			// Standard Error: 3_355
			.saturating_add(Weight::from_parts(39_287, 0).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(j.into()))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Identity::JudgementsDoubleMap` (r:21 w:20)
	/// Proof: `Identity::JudgementsDoubleMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `j` is `[0, 20]`.
	fn clear_identity_double_map_usage(j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320 + j * (25 ±0)`
		//  Estimated: `3771 + j * (2501 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_582_328, 0)
			.saturating_add(Weight::from_parts(0, 3771))
			// Standard Error: 4_841
			.saturating_add(Weight::from_parts(3_026_646, 0).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(j.into())))
			.saturating_add(Weight::from_parts(0, 2501).saturating_mul(j.into()))
	}
}
